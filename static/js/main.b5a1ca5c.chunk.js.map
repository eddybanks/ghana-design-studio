{"version":3,"sources":["components/Layouts/Navigation.js","containers/LandingContainer.js","components/App/App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","Navigation","classes","useEffect","className","AppBar","position","color","Toolbar","IconButton","edge","aria-label","Typography","variant","Button","LandingContainer","state","categories","this","props","Paper","background","map","item","Card","card","Component","withStyles","backgroundColor","padding","margin","fontSize","height","width","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uVASMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAiCCK,EA7BI,WACjB,IAAMC,EAAUV,IAWhB,OAJAW,qBAAU,cAEP,IAGD,yBAAKC,UAAWF,EAAQP,MACtB,kBAACU,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,WAC9B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQN,UAAWF,EAAQL,WAAYU,MAAM,UAAUI,aAAW,QACjF,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKT,UAAWF,EAAQF,OAhBzC,uBAmBH,kBAACc,EAAA,EAAD,CAAQP,MAAM,WAAd,a,uBCtBJQ,E,YACJ,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXhB,MAAO,sBACPiB,WAAY,CACV,CAAEjB,MAAO,cACT,CAAEA,MAAO,eACT,CAAEA,MAAO,mBARD,E,sEAaJ,IACDE,EAAWgB,KAAKC,MAAhBjB,QACP,OACE,kBAACkB,EAAA,EAAD,CAAOhB,UAAWF,EAAQmB,YACxB,kBAACT,EAAA,EAAD,KAAaM,KAAKF,MAAMhB,OACvBkB,KAAKF,MAAMC,WAAWK,KAAI,SAAAC,GAAI,OAC7B,kBAACC,EAAA,EAAD,CAAMpB,UAAWF,EAAQuB,MAAOF,EAAKvB,e,GApBhB0B,aA2BhBC,cA5CA,CACbN,WAAY,CACVO,gBAAiB,kBACjBrB,MAAO,QACPsB,QAAS,KACTC,OAAQ,KACRC,SAAU,OAEZN,KAAM,CACJM,SAAU,QACVC,OAAQ,OACRC,MAAO,OACPJ,QAAS,OACTC,OAAQ,SA+BGH,CAAmBZ,G,QCzBnBmB,E,iLAZX,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+B,KAAK,KAAI,kBAAC,EAAD,a,GAPRT,a,QCGEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,IAAD,KAAQ,kBAAC,EAAD,OAAkBC,SAASC,eAAe,SD0H5D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b5a1ca5c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}))\r\n\r\nconst Navigation = () => {\r\n  const classes = useStyles()\r\n  const navList = [\r\n    { title: 'Ghana Design Studio', path: '/' },\r\n    { title: 'About Us', path: '/about' },\r\n    { title: 'Contact Us', path: '/contact' }\r\n  ]\r\n\r\n  useEffect(() => {\r\n\r\n  }, [])\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" color=\"inherit\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            {navList[0].title}\r\n          </Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navigation","import React, { Component } from 'react'\r\nimport { Paper, Typography, Card } from '@material-ui/core'\r\nimport { withStyles } from '@material-ui/core/styles'\r\n\r\nconst styles = {\r\n  background: {\r\n    backgroundColor: 'rgba(0,0,0,0.4)',\r\n    color: 'white',\r\n    padding: '5%',\r\n    margin: '2%',\r\n    fontSize: '3em'\r\n  },\r\n  card: {\r\n    fontSize: '0.3em',\r\n    height: '40vh',\r\n    width: '20vw',\r\n    padding: '2rem',\r\n    margin: '2rem'\r\n  }\r\n}\r\n\r\nclass LandingContainer extends Component {\r\n  constructor() {\r\n    super()\r\n\r\n    this.state = {\r\n      title: \"Ghana Design Studio\",\r\n      categories: [\r\n        { title: \"Web Design\" },\r\n        { title: \"Logo Design\" },\r\n        { title: \"T-shirt Print\" }\r\n      ]\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {classes} = this.props\r\n    return (\r\n      <Paper className={classes.background}>\r\n        <Typography>{this.state.title}</Typography>\r\n        {this.state.categories.map(item => (\r\n          <Card className={classes.card}>{item.title}</Card>\r\n        ))}\r\n      </Paper>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(LandingContainer)","import React, { Component } from 'react'\n// import Header from '../Layouts/Header'\nimport Navigation from '../Layouts/Navigation'\n// import Typography from '@material-ui/core/Typography'\n\nimport LandingContainer from '../../containers/LandingContainer'\n\nimport { Route, Switch } from 'react-router-dom'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navigation />\n        {/* <Typography><Header title=\"Ghana Design Studio\" /></Typography> */}\n        <Switch>\n          <Route path=\"/\"><LandingContainer /></Route>\n        </Switch>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styling/index.css';\nimport App from './components/App/App';\nimport { HashRouter as Router } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}